# ─────────────────────────────────────────────────────────
# R LIBRARY BASE (Amazon Linux 2023)  — pre-baked libs
# Produces: rlib:al2023-r4.4.1-maive
# ─────────────────────────────────────────────────────────

########## Stage 1: build R and compile packages ##########
FROM public.ecr.aws/docker/library/amazonlinux:2023 AS build

ARG R_VERSION
ARG GITHUB_PAT
ARG GITHUB_USERNAME

ENV PATH="/usr/local/bin:${PATH}"
# Speed-ups / stable installs
ENV MAKEFLAGS="-j$(nproc)"
ENV R_REMOTES_NO_ERRORS_FROM_WARNINGS=true
ENV R_INSTALL_STAGED=false
ENV R_BATCHSAVE="no"

# Build deps (headers + toolchain) and ensure libcurl (not minimal)
RUN dnf -y update --refresh \
 && dnf -y install dnf-plugins-core \
 && dnf repolist \
 && dnf -y swap libcurl-minimal libcurl --allowerasing \
 && dnf -y install \
      libcurl-devel \
      openssl-devel \
      zlib-devel \
      bzip2-devel \
      xz-devel \
      pcre2-devel \
      readline-devel \
      libxml2-devel \
      libsodium-devel \
      gcc gcc-c++ gcc-gfortran make which findutils \
      perl \
      tar gzip ca-certificates \
 && dnf clean all && rm -rf /var/cache/dnf/*

# Build & install R from source
WORKDIR /tmp
RUN curl -fsSLO "https://cran.r-project.org/src/base/R-4/R-${R_VERSION}.tar.gz" \
 && tar -xzf "R-${R_VERSION}.tar.gz" \
 && cd "R-${R_VERSION}" \
 && ./configure --enable-R-shlib --with-readline --with-x=no --prefix=/usr/local \
 && make -j"$(nproc)" && make install \
 && cd / && rm -rf "/tmp/R-${R_VERSION}"* \
 && R --version

# Global CRAN mirror
RUN bash -lc "echo 'options(repos = c(CRAN = \"https://cran.rstudio.com\"))' >> /usr/local/lib/R/etc/Rprofile.site"

# Optional GitHub auth for pak
RUN if [ -n "${GITHUB_PAT:-}" ]; then \
      mkdir -p /usr/local/lib/R/etc && \
      echo "GITHUB_PAT=${GITHUB_PAT}" >> /usr/local/lib/R/etc/Renviron.site && \
      echo "GITHUB_USERNAME=${GITHUB_USERNAME}" >> /usr/local/lib/R/etc/Renviron.site; \
    fi

# Install pak (fast installer)
RUN R -q -e "install.packages('pak', repos='https://cran.rstudio.com')"

# Install CRAN packages from list (located inside r_scripts/)
COPY r_scripts/r-packages.txt /tmp/r-packages.txt
RUN R -q -e "pkgs <- readLines('/tmp/r-packages.txt'); \
             pkgs <- pkgs[!grepl('^\\s*#', pkgs) & nzchar(trimws(pkgs))]; \
             if (length(pkgs)) pak::pkg_install(pkgs)"

# Install the MAIVE package
RUN R -q -e "pak::pkg_install('PetrCala/maive@ui-v0.1.0-qfi')"

# Prove what's installed
RUN R -q -e "writeLines(apply(installed.packages()[,c('Package','Version')],1,paste,collapse='@'))" > /root/rlib-manifest.txt


########## Stage 2: minimal runtime base ##########
FROM public.ecr.aws/docker/library/amazonlinux:2023 AS rlib

ARG R_VERSION

# Runtime libs only (keep libcurl-minimal from base; do NOT install libcurl)
RUN dnf -y update \
 && dnf -y install \
      zlib bzip2-libs xz-libs pcre2 readline \
      libxml2 openssl-libs \
      libsodium \
      libgcc libgfortran \
 && dnf clean all

# Bring in R & the preinstalled libraries
COPY --from=build /usr/local /usr/local
COPY --from=build /root/rlib-manifest.txt /opt/rlib-manifest.txt

ENV PATH="/usr/local/bin:${PATH}"

# Final image label for traceability
LABEL r.version="${R_VERSION}" base="al2023" rlib.manifest="/opt/rlib-manifest.txt"
