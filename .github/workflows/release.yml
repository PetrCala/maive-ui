name: Release

on:
  pull_request:
    types: [closed]
    branches: [master]

permissions:
  id-token: write
  contents: read
  pull-requests: write

env:
  TF_VERSION: 1.12.0
  TG_VERSION: 0.62.1
  PROJECT_NAME: maive
  MAIVE_TAG: ui-v0.1.0-qfi
  R_VERSION: 4.4.1

jobs:
  labelChecks:
    runs-on: ubuntu-latest
    if: ${{ github.event.pull_request.merged == true }}
    outputs:
      READY_TO_BUILD: ${{ steps.labelCheck.outputs.READY_TO_BUILD }}
      SEMVER_LEVEL: ${{ steps.labelCheck.outputs.SEMVER_LEVEL }}
    steps:
      - name: Determine labels from PR
        id: labelCheck
        run: |
          label_names='${{ toJson(github.event.pull_request.labels) }}'
          ready_to_build="false"
          declare -A label_map=( ["release"]="ready_to_build" )
          for label in "${!label_map[@]}"; do
            if echo "$label_names" | jq -e ".[] | select(.name == \"$label\")" >/dev/null; then
              eval "${label_map[$label]}=true"
            fi
          done
          semver_labels=$(echo "$label_names" | jq -r '[.[] | select(.name | startswith("v-")) | .name]')
          label_count=$(echo "$semver_labels" | jq 'length')
          semver_level="patch"
          if ((label_count > 1)); then
            echo "Error: more than one label starting with 'v-' found." >&2
            exit 1
          elif ((label_count == 1)); then
            semver_level=$(echo "$semver_labels" | jq -r '.[0]' | sed 's/^v-//')
            echo "Assigned semver level: $semver_level"
          fi
          semver_level=$(echo "$semver_level" | tr '[:lower:]' '[:upper:]')
          echo "READY_TO_BUILD=$ready_to_build" >> "$GITHUB_OUTPUT"
          echo "SEMVER_LEVEL=$semver_level" >> "$GITHUB_OUTPUT"
        shell: bash

  bumpVersion:
    runs-on: ubuntu-latest
    needs: [labelChecks]
    if: ${{ needs.labelChecks.outputs.READY_TO_BUILD == 'true' && github.event.pull_request.merged == true }}
    outputs:
      NEW_VERSION: ${{ steps.bumpVersion.outputs.NEW_VERSION }}
      COMMIT_HASH: ${{ steps.commitHash.outputs.COMMIT_HASH }}
      COMMIT_HASH_SHORT: ${{ steps.commitHash.outputs.COMMIT_HASH_SHORT }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: master

      - name: Bump version
        id: bumpVersion
        uses: ./.github/actions/composite/bumpVersion
        with:
          SEMVER_LEVEL: ${{ needs.labelChecks.outputs.SEMVER_LEVEL }}
          DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}

      - name: Get commit hash
        id: commitHash
        run: |
          echo "COMMIT_HASH=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
          echo "COMMIT_HASH_SHORT=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

  buildRlib:
    runs-on: ubuntu-latest
    outputs:
      RLIB_IMAGE: ${{ steps.buildRlib.outputs.RLIB_IMAGE }}
    if: ${{ github.event_name == 'workflow_dispatch' || (needs.labelChecks.outputs.READY_TO_BUILD == 'true' && github.event.pull_request.merged == true) }}
    needs: [labelChecks, bumpVersion]
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.bumpVersion.outputs.COMMIT_HASH }}
          fetch-depth: 0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/gha-terraform
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Build or skip rlib
        id: buildRlib
        run: |
          ./scripts/build-r-lib.sh \
            "${{ secrets.AWS_ACCOUNT_ID }}" \
            "${{ secrets.AWS_REGION }}" \
            "${{ env.R_VERSION }}" \
            "${{ secrets.ADMIN_TOKEN }}" \
            "${{ secrets.ADMIN_NAME }}" \
            "${{ env.MAIVE_TAG }}"
        shell: bash

      - name: Print the output image URL
        run: |
          echo "RLIB_IMAGE=${{ steps.buildRlib.outputs.RLIB_IMAGE }}"

  build:
    needs: [labelChecks, bumpVersion, buildRlib]
    if: ${{ needs.labelChecks.outputs.READY_TO_BUILD == 'true' && needs.bumpVersion.outputs.NEW_VERSION != '' }}
    strategy:
      matrix:
        service: [react-ui, lambda-r-backend]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.bumpVersion.outputs.COMMIT_HASH }}
          fetch-depth: 0
          submodules: recursive

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/gha-terraform
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build & push ${{ matrix.service }}
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.service == 'lambda-r-backend' && './lambda-r-backend' || format('./apps/{0}', matrix.service) }}
          push: true
          tags: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ env.PROJECT_NAME }}-${{ matrix.service }}:${{ needs.bumpVersion.outputs.COMMIT_HASH_SHORT }}
          build-args: |
            RLIB_IMAGE=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ env.PROJECT_NAME }}-rlib:latest

  plan:
    runs-on: ubuntu-latest
    needs: [build, bumpVersion]
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.bumpVersion.outputs.COMMIT_HASH }}
          fetch-depth: 0
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/gha-terraform
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Set certificate ARN
        id: certificateArn
        run: |
          if [ -n "${{ secrets.CERTIFICATE_ARN }}" ]; then
            echo "CERTIFICATE_ARN=${{ secrets.CERTIFICATE_ARN }}" >> $GITHUB_OUTPUT
          else
            echo "CERTIFICATE_ARN=" >> $GITHUB_OUTPUT
          fi
      - name: Plan
        uses: gruntwork-io/terragrunt-action@v2
        env:
          TF_VAR_account_id: ${{ secrets.AWS_ACCOUNT_ID }}
          TF_VAR_region: ${{ secrets.AWS_REGION }}
          TF_VAR_project: ${{ env.PROJECT_NAME }}
          TF_VAR_email: ${{ secrets.ADMIN_EMAIL }}
          TF_VAR_image_tag: ${{ needs.bumpVersion.outputs.COMMIT_HASH_SHORT }}
          TF_VAR_certificate_arn: ${{ steps.certificateArn.outputs.CERTIFICATE_ARN }}
        with:
          tf_version: ${{ env.TF_VERSION }}
          tg_version: ${{ env.TG_VERSION }}
          tg_dir: terraform/stacks/prod-runtime
          tg_command: "plan"

  deploy:
    runs-on: ubuntu-latest
    needs: [plan, bumpVersion]
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.bumpVersion.outputs.COMMIT_HASH }}
          fetch-depth: 0
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/gha-terraform
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Set certificate ARN
        id: certificateArn
        run: |
          if [ -n "${{ secrets.CERTIFICATE_ARN }}" ]; then
            echo "CERTIFICATE_ARN=${{ secrets.CERTIFICATE_ARN }}" >> $GITHUB_OUTPUT
          else
            echo "CERTIFICATE_ARN=" >> $GITHUB_OUTPUT
          fi
      - name: Deploy
        uses: gruntwork-io/terragrunt-action@v2
        env:
          TF_VAR_account_id: ${{ secrets.AWS_ACCOUNT_ID }}
          TF_VAR_region: ${{ secrets.AWS_REGION }}
          TF_VAR_project: ${{ env.PROJECT_NAME }}
          TF_VAR_email: ${{ secrets.ADMIN_EMAIL }}
          TF_VAR_image_tag: ${{ needs.bumpVersion.outputs.COMMIT_HASH_SHORT }}
          TF_VAR_certificate_arn: ${{ steps.certificateArn.outputs.CERTIFICATE_ARN }}
        with:
          tf_version: ${{ env.TF_VERSION }}
          tg_version: ${{ env.TG_VERSION }}
          tg_dir: terraform/stacks/prod-runtime
          tg_command: "apply"
