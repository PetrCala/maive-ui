name: Release

on:
  pull_request:
    types:
      - closed
    branches: [master]

permissions:
  id-token: write
  contents: read
  pull-requests: write # to post plan as comment

env:
  TF_VERSION: 1.12.0
  PROJECT_NAME: maive

jobs:
  labelChecks:
    runs-on: ubuntu-latest

    outputs:
      READY_TO_BUILD: ${{ steps.labelCheck.outputs.READY_TO_BUILD }}
      SEMVER_LEVEL: ${{ steps.labelCheck.outputs.SEMVER_LEVEL }}

    steps:
      - name: Determine labels from PR
        id: labelCheck
        run: |
          label_names='${{ toJson(github.event.pull_request.labels) }}'

          ready_to_build="false"

          declare -A label_map=(
            ["release"]="ready_to_build"
          )

          for label in "${!label_map[@]}"; do
            if echo "$label_names" | jq -e ".[] | select(.name == \"$label\")" >/dev/null; then
              eval "${label_map[$label]}=true"
            fi
          done

          semver_labels=$(echo "$label_names" | jq -r '[.[] | select(.name | startswith("v-")) | .name]')
          label_count=$(echo "$semver_labels" | jq 'length')

          semver_level="build"
          if ((label_count > 1)); then
            echo "Error: more than one label starting with 'v-' found." >&2
            exit 1
          elif ((label_count == 1)); then
            semver_level=$(echo "$semver_labels" | jq -r '.[0]' | sed 's/^v-//')
            echo "Assigned semver level: $semver_level"
          fi

          # convert to uppercase
          semver_level=$(echo "$semver_level" | tr '[:lower:]' '[:upper:]')

          echo "READY_TO_BUILD=$ready_to_build" >> "$GITHUB_OUTPUT"
          echo "SEMVER_LEVEL=$semver_level" >> "$GITHUB_OUTPUT"
        shell: bash

  build:
    needs: [labelChecks]
    if: ${{ needs.labelChecks.outputs.READY_TO_BUILD == 'true' && github.event.pull_request.merged == true }}
    strategy:
      matrix:
        service: [react-ui, flask-api, r-plumber]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: master

      - name: Bump version
        id: bumpVersion
        uses: ./.github/actions/composite/bumpVersion
        with:
          SEMVER_LEVEL: ${{ needs.labelChecks.outputs.SEMVER_LEVEL }}
          DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/gha-terraform
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set image tag
        id: image-tag
        run: |
          echo "IMAGE_TAG=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Build & push ${{ matrix.service }}
        uses: docker/build-push-action@v5
        with:
          context: ./apps/${{ matrix.service }}
          push: true
          tags: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ env.PROJECT_NAME }}-${{ matrix.service }}:${{ steps.image-tag.outputs.IMAGE_TAG }}

  plan:
    needs: build
    runs-on: ubuntu-latest
    defaults:
      # run: { working-directory: infra/envs/prod }   # dev â†’ point to dev dir
      run: { working-directory: terraform/stacks/prod-runtime }
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/gha-terraform
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set image tag
        id: image-tag
        run: |
          echo "IMAGE_TAG=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        run: terraform init \
          -backend-config="bucket=${{ env.PROJECT_NAME }}-tf-state" \
          -backend-config="key=prod-runtime.tfstate" \
          -backend-config="region=${{ secrets.AWS_REGION }}"

      - name: Terraform Plan
        run: terraform plan -input=false \
          -var="aws_account_id=${{ secrets.AWS_ACCOUNT_ID }}" \
          -var="image_tag=${{ steps.image-tag.outputs.IMAGE_TAG }}" \
          -out=plan.out

      - name: Terraform Apply
        if: github.ref == 'refs/heads/release'
        run: terraform apply -input=false -auto-approve plan.out
